%matplotlib qt

import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage as ndi
import skimage.io as io
from skimage.exposure import equalize_hist

def rawEqualization(x):
    M, N = x.shape
    hist, bins = np.histogram(x, np.arange(257))
    
    normHist = hist / (M*N)
    cdf = np.cumsum(normHist)    # calcolo CDF dell'istogramma
    
    y = cdf[np.uint8(x)]
    
    return y

def glob_equaliz(x):
    return equalize_hist(x/255)

def equalizingBlock(block):
    block = np.reshape(block, (3, 3))
    block = equalize_hist(block/255)
    return block[1, 1] # valore centrale

def loc_equaliz(x):
    return ndi.generic_filter(x, equalizingBlock, (3, 3))

originalImage = np.float64(io.imread('../Images/quadrato.tif'))
y = glob_equaliz(originalImage)

fig, (ax0, ax1, ax2, ax3) = plt.subplots(1, 4)

ax0.imshow(originalImage, clim=None, cmap='gray')
ax0.set_title("Immagine originale")

ax1.imshow(y, clim=None, cmap='gray')
ax1.set_title("Equalizzazione skimage (globale)")

localY = loc_equaliz(originalImage)
ax2.imshow(localY, clim=None, cmap='gray')
ax2.set_title("Equalizzazione generic_filter (locale)")

rawY = rawEqualization(originalImage)
ax3.imshow(rawY, clim=None, cmap='gray')
ax3.set_title("Raw equalization (CDF)")
